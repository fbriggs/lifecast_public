# MIT License. Copyright (c) 2025 Lifecast Incorporated. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "new_git_repository")


# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
http_archive(
    name = "hedron_compile_commands",

    # Replace the commit hash (4f28899228fb3ad0126897876f147ca15026151e) in both places (below) with the latest (https://github.com/hedronvision/bazel-compile-commands-extractor/commits/main), rather than using the stale one here.
    url = "https://github.com/hedronvision/bazel-compile-commands-extractor/archive/4f28899228fb3ad0126897876f147ca15026151e.tar.gz",
    strip_prefix = "bazel-compile-commands-extractor-4f28899228fb3ad0126897876f147ca15026151e",
    # When you first run this tool, it'll recommend a sha256 hash to put here with a message like: "DEBUG: Rule 'hedron_compile_commands' indicated that a canonical reproducible form can be obtained by modifying arguments sha256 = ..."

    # patch to fix crash on cuda targets
    patches = ["//third_party:hedron_cuda.patch"],
    patch_args = ["-p1"],
)
load("@hedron_compile_commands//:workspace_setup.bzl", "hedron_compile_commands_setup")
hedron_compile_commands_setup()
load("@hedron_compile_commands//:workspace_setup_transitive.bzl", "hedron_compile_commands_setup_transitive")
hedron_compile_commands_setup_transitive()
load("@hedron_compile_commands//:workspace_setup_transitive_transitive.bzl", "hedron_compile_commands_setup_transitive_transitive")
hedron_compile_commands_setup_transitive_transitive()
load("@hedron_compile_commands//:workspace_setup_transitive_transitive_transitive.bzl", "hedron_compile_commands_setup_transitive_transitive_transitive")
hedron_compile_commands_setup_transitive_transitive_transitive()

### cuda ###

# See https://github.com/bazel-contrib/rules_cuda
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
http_archive(
    name = "rules_cuda",
    sha256 = "fe8d3d8ed52b9b433f89021b03e3c428a82e10ed90c72808cc4988d1f4b9d1b3",
    strip_prefix = "rules_cuda-v0.2.5",
    urls = ["https://github.com/bazel-contrib/rules_cuda/releases/download/v0.2.5/rules_cuda-v0.2.5.tar.gz"],
)

load("@rules_cuda//cuda:repositories.bzl", "register_detected_cuda_toolchains", "rules_cuda_dependencies")
rules_cuda_dependencies()
register_detected_cuda_toolchains()

# TODO: check if the line below breaks things for Mac
register_detected_cuda_toolchains()


### bazel standalone mac os x build rules ###

http_archive(
    name = "rules_proto",
    sha256 = "66bfdf8782796239d3875d37e7de19b1d94301e8972b3cbd2446b332429b4df1",
    strip_prefix = "rules_proto-4.0.0",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.tar.gz",
        "https://github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.tar.gz",
    ],
)
load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")
rules_proto_dependencies()
rules_proto_toolchains()

### Stuff for creating standalone OS X applications

http_archive(
    name = "build_bazel_rules_apple",
    sha256 = "65eafafe94b8573e74160b7f587d091a0fa34d69e6d2c41c4afb1eef140383ec",
    url = "https://github.com/bazelbuild/rules_apple/releases/download/3.3.0/rules_apple.3.3.0.tar.gz",
)
load("@build_bazel_rules_apple//apple:repositories.bzl", "apple_rules_dependencies")
apple_rules_dependencies()
load("@build_bazel_rules_swift//swift:repositories.bzl", "swift_rules_dependencies")
swift_rules_dependencies()
load("@build_bazel_rules_swift//swift:extras.bzl", "swift_rules_extra_dependencies")
swift_rules_extra_dependencies()
load("@build_bazel_apple_support//lib:repositories.bzl", "apple_support_dependencies")

apple_support_dependencies()


### gtest ####

http_archive(
  name = "com_google_googletest",
  urls = ["https://github.com/google/googletest/archive/5ab508a01f9eb089207ee87fd547d290da39d015.zip"],
  strip_prefix = "googletest-5ab508a01f9eb089207ee87fd547d290da39d015",
)
bind(name="gtest_main", actual="@com_google_googletest//:gtest_main")

### absl ###

#http_archive(
#  name = "com_google_absl",
#  urls = ["https://github.com/abseil/abseil-cpp/archive/c512f118dde6ffd51cb7d8ac8804bbaf4d266c3a.zip"],
#  strip_prefix = "abseil-cpp-c512f118dde6ffd51cb7d8ac8804bbaf4d266c3a",
#  sha256 = "8400c511d64eb4d26f92c5ec72535ebd0f843067515244e8b50817b0786427f9",
#)

### gflags ###

# On Mac and Linux we compile gflags from source.
http_archive(
    name = "com_github_gflags_gflags",
    sha256 = "6e16c8bc91b1310a44f3965e616383dbda48f83e8c1eaa2370a215057b00cabe",
    strip_prefix = "gflags-77592648e3f3be87d6c7123eb81cbad75f9aef5a",
    urls = [
        "https://mirror.bazel.build/github.com/gflags/gflags/archive/77592648e3f3be87d6c7123eb81cbad75f9aef5a.tar.gz",
        "https://github.com/gflags/gflags/archive/77592648e3f3be87d6c7123eb81cbad75f9aef5a.tar.gz",
    ],
)
bind(name="gflags", actual="@com_github_gflags_gflags//:gflags")


# Only used to force including a dll that comes from a transitive dependency
new_local_repository(
  name = "abseil_windows_vcpkg",
  path = "../../vcpkg/packages/abseil_x64-windows",
  build_file_content =
"""
cc_library(
    name = "abseil",
    srcs = glob(["lib/*.lib", "bin/*.dll"]), 
    hdrs = glob(["include/absl/*.h"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
)
"""
)

new_local_repository(
  name = "openexr_windows_vcpkg",
  path = "../../vcpkg/packages/openexr_x64-windows",
  build_file_content =
"""
cc_library(
    name = "openexr",
    srcs = glob(["lib/*.lib", "bin/*.dll"]), 
    hdrs = glob(["include/OpenEXR/*.h"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
)
"""
)

new_local_repository(
  name = "imath_windows_vcpkg",
  path = "../../vcpkg/packages/imath_x64-windows",
  build_file_content = """
cc_library(
  name = "imath",
  srcs    = glob(["lib/*.lib", "bin/*.dll"]),
  hdrs    = glob(["include/Imath/*.h"]),
  includes= ["include"],
  visibility = ["//visibility:public"],
)
"""
)

new_local_repository(
  name = "libdeflate_windows_vcpkg",
  path = "../../vcpkg/packages/libdeflate_x64-windows",
  build_file_content = """
cc_library(
  name     = "libdeflate",
  srcs     = glob(["lib/*.lib", "bin/*.dll"]),
  hdrs     = glob(["include/*.h"]),
  includes = ["include"],
  visibility = ["//visibility:public"],
)
"""
)


# On windows we compile gflags from vcpkg
new_local_repository(
  name = "gflags_windows_vcpkg",
  path = "../../vcpkg/packages/gflags_x64-windows",
  build_file_content =
"""
cc_library(
    name = "gflags",
    srcs = glob(["lib/*.lib", "bin/*.dll"]), 
    hdrs = glob(["include/gflags/*.h"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
)
"""
)

### glog ###

http_archive(
    name = "com_github_google_glog",
    sha256 = "7083af285bed3995b5dc2c982f7de39bced9f0e6fd78d631f3285490922a0c3d",
    strip_prefix = "glog-3106945d8d3322e5cbd5658d482c9ffed2d892c0",
    urls = [
        "https://github.com/drigz/glog/archive/3106945d8d3322e5cbd5658d482c9ffed2d892c0.tar.gz",
    ],
)
bind(name="glog", actual="@com_github_google_glog//:glog")

new_local_repository(
  name = "glog_windows_vcpkg",
  path = "../../vcpkg/packages/glog_x64-windows",
  build_file_content =
"""
cc_library(
    name = "glog",
    srcs = glob(["lib/*.lib", "bin/*.dll"]), 
    hdrs = glob(["include/glog/*.h"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
)
"""
)

### eigen ####

http_archive(
    name = "com_github_eigen_eigen",
    sha256 = "7985975b787340124786f092b3a07d594b2e9cd53bbfe5f3d9b1daee7d55f56f",
    strip_prefix = "eigen-3.3.9",
    urls = [
        "https://gitlab.com/libeigen/eigen/-/archive/3.3.9/eigen-3.3.9.tar.gz",
    ],
    build_file_content = """
cc_library(
    name    = 'eigen',
    srcs    = [],
    includes= ['.'],
    hdrs    = glob(['Eigen/**']),
    copts   = ["-O3", "-Wno-unused-function", "-Wno-int-in-bool-context"],
    visibility = ['//visibility:public'],
)
""",
)
bind(name = "eigen", actual = "@com_github_eigen_eigen//:eigen")




### ceres ###

# ceres via homebrew for os x- seems to be much faster (multithreaded)
new_local_repository(
  name = "ceres_osx_homebrew",
  path = "/usr/local/Cellar/ceres-solver/2.2.0_1",
  build_file_content =
"""
cc_library(
    name = "ceres",
    srcs = glob(["lib/*.dylib"]),
    hdrs = glob(["include/ceres/*.h", "include/ceres/**/*.h"]),
    includes = ["include"],
    deps = ["//external:glog"],
    copts=["-O3"],
    visibility = ["//visibility:public"],
    linkstatic = 1,
)
"""
)
bind(name="ceres", actual="@ceres_osx_homebrew//:ceres")

new_local_repository(
  name = "ceres_linux",
  path = "/usr",
  build_file_content =
"""
cc_library(
    name = "ceres",
    includes = ["include/ceres"],
    srcs = ["lib/x86_64-linux-gnu/libceres.so"],
    hdrs = glob(["include/ceres/*.h", "include/ceres/internal/*.h"]),
    deps = ["//external:glog"],
    copts=["-O3"],
    visibility = ["//visibility:public"],
)
"""
)

new_local_repository(
  name = "ceres_windows_vcpkg",
  path = "../../vcpkg/packages/ceres_x64-windows",
  build_file_content =
"""
cc_library(
    name = "ceres",
    srcs = glob(["lib/*.lib", "bin/*.dll"]), 
    hdrs = glob(["include/ceres/*.h"]),
    includes = ["include"],
    deps = [
      "@glog_windows_vcpkg//:glog",
      "@gflags_windows_vcpkg//:gflags",
    ],
    visibility = ["//visibility:public"],
)
"""
)


### glfw ###

new_local_repository(
  name = "glfw_osx_homebrew",
  path = "/usr/local/Cellar/glfw/3.4",
  build_file_content =
"""
cc_library(
    name = "glfw",
    srcs = glob(["lib/*.dylib"]),
    hdrs = glob(["include/**/*.h"]),
    linkopts = ["-framework OpenGL"],
    includes = ["include"],
    copts=["-O3"],
    visibility = ["//visibility:public"],
    linkstatic = 1,
)
"""
)

# glfw for Linux
new_local_repository(
  name = "glfw_linux",
  path = "/usr/include/GLFW",
  build_file_content =
"""
cc_library(
    name = "glfw",
    srcs = glob(["lib/*.so"]),
    hdrs = glob(["include/GL/*.h", "include/GLFW/*.h"]),
    linkopts = ["-lglfw -lGL -ldl"],
    includes = ["include"],
    copts=["-O3 -DGL_GLEXT_PROTOTYPES"],
    visibility = ["//visibility:public"],
    linkstatic = 1,
)
"""
)

new_local_repository(
  name = "glfw_windows_vcpkg",
  #path = "../../vcpkg/packages/glfw3_x86-windows", # use this if we install the x86 vcpkg instead (this would happen by default without specifying the platform)
  path = "../../vcpkg/packages/glfw3_x64-windows",
  build_file_content =
"""
cc_library(
    name = "glfw",
    srcs = glob(["lib/*.lib", "bin/*.dll"]), # include the dll here to copy it to the build directory!
    hdrs = glob(["include/**/*.h"]),
    linkopts = ["opengl32.lib"],
    includes = ["include"],
    visibility = ["//visibility:public"],
    linkstatic = 1,
)
"""
)

### opencv ###

new_local_repository(
  name = "ffmpeg_linux",
  path = "/usr/",
  build_file_content =
"""
cc_library(
  name = "ffmpeg",
  srcs = glob([
    "lib/x86_64-linux-gnu/libavcodec*.so",
    "lib/x86_64-linux-gnu/libavformat*.so",
    "lib/x86_64-linux-gnu/libavutil*.so",
    "lib/x86_64-linux-gnu/libx264*.so",
    "lib/x86_64-linux-gnu/libx265*.so",
    "lib/x86_64-linux-gnu/libavfilter*.so",
    "lib/x86_64-linux-gnu/libavdevice*.so",
    "lib/x86_64-linux-gnu/libswscale*.so",
  ]),
  hdrs = glob([
    "libavformat/*.h",
    "libavcodec/*.h",
    "libswscale/*.h",
    "libavutil/*.h",    
  ]),
  includes = ["include/x86_64-linux-gnu"],
  visibility = ["//visibility:public"],
)
"""
)

new_local_repository(
  name = "ffmpeg_osx_homebrew",
  path = "/usr/local/Cellar/ffmpeg/7.1.1_1",
  build_file_content =
"""
cc_library(
  name = "ffmpeg",
  srcs = glob(["lib/*.dylib"]),
  hdrs = glob(["include/**/*.h"]),
  includes = ["include"],
  visibility = ["//visibility:public"],
)
"""
)

new_local_repository(
  name = "opencv_osx_homebrew",
  path = "/usr/local/Cellar/opencv/4.11.0_1",
  build_file_content =
"""
cc_library(
  name = "opencv",
  srcs = glob(["lib/*.dylib"]),
  hdrs = glob([
    "include/opencv4/opencv2/**/*.h",
    "include/opencv4/opencv2/**/*.hpp",
    "include/opencv4/opencv2/*.hpp"
  ]),
  includes = ["include"],
  strip_include_prefix = "include/opencv4",
  copts=["-O3"],
  visibility = ["//visibility:public"],
  linkstatic = 1,
)
"""
)

new_local_repository(
  name = "glib",
  path = "/usr",
  build_file_content =
"""
cc_library(
  name = "glib",
  srcs = glob([
    "lib/x86_64-linux-gnu/libglib-2.0.so*",
    "lib/x86_64-linux-gnu/libgobject-2.0.so*",
    "lib/x86_64-linux-gnu/libgio-2.0.so*"
  ]),
  hdrs = glob([
    "include/glib-2.0/**/*.h", 
    "lib/x86_64-linux-gnu/glib-2.0/include/**/*.h"
  ]),
  includes = [
    "include/glib-2.0", 
    "lib/x86_64-linux-gnu/glib-2.0/include"
  ],
  visibility = ["//visibility:public"],
)
"""
)

# Locally compiled opencv, see "README compile OpenCV Ubuntu.txt" for setup
new_local_repository(
  name = "opencv_linux",
  path = "/usr/local/",  # This is where OpenCV gets installed by default when built from source
  build_file_content =
"""
cc_library(
  name = "opencv",
  srcs = glob([
    "lib/libopencv_*.so*",
    "lib64/libopencv_*.so*",  # Include both in case your system uses lib64
  ]),
  hdrs = glob([
    "include/opencv4/opencv2/**/*.h",
    "include/opencv4/opencv2/**/*.hpp",
    "include/opencv4/opencv2/*.hpp"
  ]),
  includes = ["include/opencv4"],
  strip_include_prefix = "include/opencv4",
  deps = ["@glib//:glib"],  
  copts=["-O3"],
  linkopts=[
    "-lopencv_core", 
    "-lopencv_features2d",
    "-lopencv_flann",
    "-lopencv_imgproc",
    "-lopencv_calib3d",
    "-lopencv_xfeatures2d",
    "-lopencv_highgui",
    "-lopencv_imgcodecs"
  ],
  visibility = ["//visibility:public"],
  linkstatic = 1,
)
"""
)

## start of dependencies for opencv_windows_vcpkg

new_local_repository(
  name = "zlib_windows_vcpkg",
  path = "../../vcpkg/packages/zlib_x64-windows",
  build_file_content = """
config_setting(
  name = "debug_build",
  values = {"compilation_mode": "dbg"},
)

cc_library(
    name = "zlib",
    srcs = select({
      "debug_build": glob(["debug/bin/*.dll"]),
      "//conditions:default": glob(["bin/*.dll"]),
    }),
    hdrs = [], # not used, only included indirectly
    visibility = ["//visibility:public"],
)""")

new_local_repository(
  name = "liblzma_windows_vcpkg",
  path = "../../vcpkg/packages/liblzma_x64-windows",
  build_file_content = """
cc_library(
    name = "liblzma",
    srcs = glob(["bin/*.dll"]),
    hdrs = [], # not used, only included indirectly
    visibility = ["//visibility:public"],
)""")

new_local_repository(
  name = "libpng_windows_vcpkg",
  path = "../../vcpkg/packages/libpng_x64-windows",
  build_file_content = """
config_setting(
  name = "debug_build",
  values = {"compilation_mode": "dbg"},
)

cc_library(
    name = "libpng",
    srcs = select({
      "debug_build": glob(["debug/bin/*.dll"]),
      "//conditions:default": glob(["bin/*.dll"]),
    }),
    hdrs = [], # not used, only included indirectly
    visibility = ["//visibility:public"],
)""")

new_local_repository(
  name = "libwebp_windows_vcpkg",
  path = "../../vcpkg/packages/libwebp_x64-windows",
  build_file_content = """
cc_library(
    name = "libwebp",
    srcs = glob(["bin/*.dll"]),
    hdrs = [], # not used, only included indirectly
    visibility = ["//visibility:public"],
)""")

new_local_repository(
  name = "tiff_windows_vcpkg",
  path = "../../vcpkg/packages/tiff_x64-windows",
  build_file_content = """
cc_library(
    name = "tiff",
    srcs = glob(["bin/*.dll"]),
    hdrs = [], # not used, only included indirectly
    visibility = ["//visibility:public"],
)""")

new_local_repository(
  name = "x264_windows_vcpkg",
  path = "../../vcpkg/packages/x264_x64-windows/tools/x264",
  #path = "../../vcpkg/packages/x264_x64-windows",
  build_file_content = """
cc_library(
    name = "x264",
    srcs = glob(["bin/*.dll"]),
    hdrs = [], # not used, only included indirectly
    visibility = ["//visibility:public"],
)""")

new_local_repository(
  name = "x265_windows_vcpkg",
  path = "../../vcpkg/packages/x265_x64-windows",
  build_file_content = """
cc_library(
    name = "x265",
    srcs = glob(["bin/*.dll"]),
    hdrs = [], # not used, only included indirectly
    visibility = ["//visibility:public"],
)""")

new_local_repository(
  name = "ffmpeg_windows_vcpkg",
  path = "../../vcpkg/packages/ffmpeg_x64-windows",
  build_file_content = """
cc_library(
    name = "ffmpeg",
    srcs = glob(["lib/*.lib", "bin/*.dll"]), 
    hdrs = glob(["include/**/*.h"]), # This gives access to libavcodec
    includes = ["include"],
    visibility = ["//visibility:public"],
    deps = [
      "@x264_windows_vcpkg//:x264",
      "@x265_windows_vcpkg//:x265",
    ]
)""")

new_local_repository(
  name = "protobuf_windows_vcpkg",
  path = "../../vcpkg/packages/protobuf_x64-windows",
  build_file_content = """
cc_library(
    name = "protobuf",
    srcs = glob(["bin/*.dll"]),
    hdrs = [], # not used, only included indirectly
    visibility = ["//visibility:public"],
)""")

## end of dependencies for opencv_windows_vcpkg

new_local_repository(
  name = "opencv_windows_vcpkg",
  path = "../../vcpkg/packages/opencv4_x64-windows",
  build_file_content =
"""
config_setting(
  name = "debug_build",
  values = {"compilation_mode": "dbg"},
)

cc_library(
    name = "opencv",
    srcs = select({
      "debug_build": glob(["debug/lib/*.lib", "debug/bin/*.dll"]),
      "//conditions:default": glob(["lib/*.lib", "bin/*.dll"]), # include the dll here to copy it to the build directory!
    }),
    hdrs = glob(["include/opencv4/opencv2/*.hpp", "include/opencv4/opencv2/**/*.hpp"]),
    #hdrs = glob(["include/opencv2/*.hpp", "include/opencv2/**/*.hpp"]),
    includes = ["include/opencv4"],
    #includes = ["include"],
    visibility = ["//visibility:public"],
    deps = [
      "@zlib_windows_vcpkg//:zlib",
      "@liblzma_windows_vcpkg//:liblzma",
      "@libpng_windows_vcpkg//:libpng",
      "@libwebp_windows_vcpkg//:libwebp",
      "@tiff_windows_vcpkg//:tiff",
      "@ffmpeg_windows_vcpkg//:ffmpeg",
      "@libjpeg-turbo_windows_vcpkg//:jpegturbo",
      "@protobuf_windows_vcpkg//:protobuf",
      "@abseil_windows_vcpkg//:abseil",
      "@openexr_windows_vcpkg//:openexr",
      "@imath_windows_vcpkg//:imath",
      "@libdeflate_windows_vcpkg//:libdeflate",
    ]
)
"""
)

### ximea ################

new_local_repository(
  name = "ximea_osx",
  path = "/Library/Frameworks/m3api.framework",
  build_file_content =
"""
cc_library(
  name = "ximea",
  srcs = glob(["Libraries/*.dylib"]),
  hdrs = glob([
    "Headers/*.h",
  ]),
  includes = ["Headers"],
  strip_include_prefix = "Headers",
  copts=["-O3"],
  #linkopts = ["-lm3api -L/opt/XIMEA/lib -Wl,-rpath=/opt/XIMEA/lib -lxiapi_dng_store -lpthread"],
  linkopts = ["-F /Library/Frameworks -framework m3api"],
  visibility = ["//visibility:public"],
  linkstatic = 1,
)
"""
)

new_local_repository(
  name = "ximea_linux",
  path = "/opt/XIMEA",
  build_file_content =
"""
cc_library(
  name = "ximea",
  srcs = glob(["lib/*.so"]),
  hdrs = glob([
    "include/*.h",
  ]),
  includes = ["include"],
  strip_include_prefix = "include",
  copts=["-O3"],
  linkopts = ["-lm3api -L/opt/XIMEA/lib -Wl,-rpath=/opt/XIMEA/lib -lxiapi_dng_store -lpthread"],
  visibility = ["//visibility:public"],
  linkstatic = 1,
)
"""
)

### libjpeg-turbo ###

new_local_repository(
  name = "jpegturbo_osx_homebrew",
  path = "/usr/local/Cellar/jpeg-turbo/3.1.1",
  build_file_content =
"""
cc_library(
    name = "jpegturbo",
    srcs = glob(["lib/*.dylib"]),
    hdrs = glob(["include/*.h"]),
    includes = ["include"],
    copts=["-O3"],
    visibility = ["//visibility:public"],
    linkstatic = 1,
)
"""
)

new_local_repository(
  name = "jpegturbo_linux",
  path = "/usr",
  build_file_content =
"""
cc_library(
    name = "jpegturbo",
    srcs = glob(["lib/x86_64-linux-gnu/libturbojpeg.so"]),
    hdrs = glob(["include/*.h"]),
    includes = ["include"],
    copts=["-O3"],
    visibility = ["//visibility:public"],
    linkstatic = 1,
)
"""
)

new_local_repository(
  name = "libjpeg-turbo_windows_vcpkg",
  path = "../../vcpkg/packages/libjpeg-turbo_x64-windows",
  build_file_content = """
cc_library(
    name = "jpegturbo",
    srcs = glob(["lib/*.lib", "bin/*.dll"]), 
    hdrs = glob(["include/*.h"]),
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
)""")


### torch ###

# NOTE: When we updated to pytorch 2.0.1 there were nasty linker errors. It was fixed by:
# https://github.com/pytorch/pytorch/issues/63558#issuecomment-1116353447
# "symbol not found in flat namespace '_PyBaseObject_Type' error in my Libtorch program was
# resolved by removing/not linking to libtorch_python.dylib"
new_local_repository(
  name = "libtorch_osx_homebrew",
  path = "/usr/local/Cellar/pytorch/2.5.1_4",
  build_file_content =
"""
cc_library(
    name = "libtorch",
    srcs = [
    "lib/libtorch.dylib",
    #"lib/libtorch_python.dylib", # apparently this causes problems!
    "lib/libtorch_global_deps.dylib",
    "lib/libtorch_cpu.dylib",
    "lib/libshm.dylib",
    "lib/libc10.dylib",
    ],
    hdrs = glob(["include/**/*.h", "include/torch/csrc/api/include/torch/*.h"]),
    includes = ["include", "include/torch/csrc/api/include/"],
    visibility = ["//visibility:public"],
)
"""
)

new_local_repository(
  name = "libtorch_linux",
  path = "/usr/local/torch/",
  build_file_content =
"""
cc_library(
    name = "libtorch",
    srcs = [
        "lib/libc10.so",
        "lib/libc10_cuda.so",
        "lib/libtorch.so",
        "lib/libtorch_cuda.so",
        "lib/libasmjit.a",
        "lib/libonnx.a",
        "lib/libtorch_cpu.so",
        "lib/libgomp-98b21ff3.so.1",
        "lib/libcublas-4cc45526.so.12",
        "lib/libcublasLt-44a813aa.so.12",
        "lib/libcudart-8774224f.so.12",
        "lib/libcudnn.so.9",
        "lib/libcudnn_adv.so.9",
        "lib/libcudnn_cnn.so.9",
        "lib/libcudnn_engines_runtime_compiled.so.9",
        "lib/libcudnn_ops.so.9",
        "lib/libcudnn_engines_precompiled.so.9",
        "lib/libcudnn_graph.so.9",
        "lib/libcudnn_heuristic.so.9",
        "lib/libnvToolsExt.so.1",
        "lib/libnvrtc.so.12",
        "lib/libnvrtc-builtins.so.12.4",
    ],
    hdrs = glob(["include/**/*.h", "include/**/*.cuh"]),
    includes = ["include/", "include/torch/csrc/api/include/"],
    copts=["-O3"],
    visibility = ["//visibility:public"],
)
"""
)

new_local_repository(
  name = "libtorch_windows",
  path = "../../libtorch-win-shared-with-deps-2.2.1+cu121/libtorch",
  #path = "../../libtorch-win-shared-with-deps-1.12.0+cu116/libtorch",
  #path = "../../libtorch-win-shared-with-deps-1.12.0+cu113/libtorch",
  #path = "../../libtorch-win-shared-with-deps-1.11.0+cu113/libtorch",
  #path = "../../libtorch-win-shared-with-deps-debug-1.12.0+cu113/libtorch",
  build_file_content = """
cc_library(
    name = "libtorch",
    srcs = glob(["lib/*.lib", "bin/*.dll"]), 
    hdrs = glob(["include/*.h", "include/**/*.h", "include/torch/csrc/api/include/torch/*.h"]),
    includes = ["include/", "include/torch/csrc/api/include/"],
    visibility = ["//visibility:public"],
)""")


### tensorrt ###

# TODO: maybe use arch instead of x86_64
# TODO: see if there's a way to get CUDA from rules_cuda instead of manually here
new_local_repository(
  name = "tensorrt_linux",
  path = "/usr",
  build_file_content = """
cc_library(
    name = "tensorrt",
    deps = [
      "@rules_cuda//cuda:runtime",
    ],
    srcs = glob([
      "lib/x86_64-linux-gnu/libnvinfer.so",
      "lib/x86_64-linux-gnu/libnvinfer_plugin.so",
      "lib/x86_64-linux-gnu/libnvonnxparser.so",
      "lib/x86_64-linux-gnu/libnvparsers.so",
    ]),
    hdrs = glob(["include/x86_64-linux-gnu/Nv*.h", "local/cuda/include/**/*.h", "local/cuda/include/**/*.hpp"]),
    includes = ["include/x86_64-linux-gnu/", "local/cuda/include/"],
    visibility = ["//visibility:public"],
)
"""
)

### cpprest ###

new_local_repository(
  name = "openssl_osx_homebrew",
  path = "/usr/local/Cellar/openssl@3/3.4.1",
  build_file_content =
"""
cc_library(
    name = "openssl",
    srcs = glob(["lib/*.dylib"]),
    hdrs = glob(["include/*.h", "include/**/*.h"]),
    includes = ["include"],
    copts=["-O3"],
    visibility = ["//visibility:public"],
    linkstatic = 1,
)
"""
)

new_local_repository(
  name = "boost_osx_homebrew",
  path = "/usr/local/Cellar/boost/1.88.0",
  build_file_content =
"""
cc_library(
    name = "boost",
    srcs = glob(["lib/*.dylib"]),
    hdrs = glob(["include/*", "include/**/*"]),
    includes = ["include"],
    copts=["-O3"],
    visibility = ["//visibility:public"],
    linkstatic = 1,
)
"""
)

new_local_repository(
  name = "cpprest_osx_homebrew",
  path = "/usr/local/Cellar/cpprestsdk/2.10.19_2",
  build_file_content =
"""
cc_library(
    name = "cpprest",
    srcs = glob(["lib/*.dylib"]),
    hdrs = glob(["include/*.h", "include/**/*.h", "include/cpprest/details/*"]),
    includes = ["include"],
    deps = [
      "@boost_osx_homebrew//:boost",
      "@openssl_osx_homebrew//:openssl",
    ],
    copts=["-O3"],
    visibility = ["//visibility:public"],
    linkstatic = 1,
)
"""
)

new_local_repository(
  name = "openssl_linux",
  path = "/usr",
  build_file_content =
"""
cc_library(
    name = "openssl",
    includes = ["include/openssl"],
    srcs = [
      "lib/x86_64-linux-gnu/libcrypto.so",
      "lib/x86_64-linux-gnu/libssl.so",
    ],
    hdrs = glob(["include/openssl/*.h"]),
    copts=["-O3"],
    visibility = ["//visibility:public"],
)
"""
)

new_local_repository(
  name = "cpprest_linux",
  path = "/usr",
  build_file_content =
"""
cc_library(
    name = "cpprest",
    includes = ["include/cpprest"],
    srcs = ["lib/x86_64-linux-gnu/libcpprest.so"],
    hdrs = glob(["include/cpprest/*.h", "include/cpprest/**/*.h"]),
    deps = ["@openssl_linux//:openssl"],
    copts=["-O3"],
    visibility = ["//visibility:public"],
)
"""
)

new_local_repository(
  name = "cpprestsdk_windows_vcpkg",
  path = "../../vcpkg/packages/cpprestsdk_x64-windows",
  build_file_content =
"""
cc_library(
    name = "cpprest",
    srcs = glob(["lib/*.lib", "bin/*.dll"]), 
    hdrs = glob(["include/cpprest/*.h"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
)
"""
)

## glew ##

new_local_repository(
  name = "glew_windows_vcpkg",
  path = "../../vcpkg/packages/glew_x64-windows",
  build_file_content =
"""
cc_library(
    name = "glew",
    srcs = glob(["lib/*.lib", "bin/*.dll"]), 
    hdrs = glob(["include/GL/*.h"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
)
"""
)


#### fix mac os x vve build dylib issues #####

new_local_repository(
    name = "homebrew_gcc_libs",
    path = "/opt/homebrew/opt/gcc/lib/gcc/current",
    build_file_content = """
package(default_visibility = ["//visibility:public"])

cc_import(
    name = "libgcc_s",
    shared_library = "libgcc_s.1.1.dylib",
    system_provided = False,
)

cc_import(
    name = "libgfortran",
    shared_library = "libgfortran.5.dylib",
    system_provided = False,
)

cc_import(
    name = "libgomp",
    shared_library = "libgomp.1.dylib",
    system_provided = False,
)

cc_import(
    name = "libquadmath",
    shared_library = "libquadmath.0.dylib",
    system_provided = False,
)

cc_library(
    name = "gcc_runtime",
    deps = [":libgcc_s", ":libgfortran", ":libgomp", ":libquadmath"],
)
""",
)

new_local_repository(
    name = "homebrew_openblas_libs",
    path = "/opt/homebrew/opt/openblas/lib",
    build_file_content = """
package(default_visibility = ["//visibility:public"])

# NOTE: update the filename if Homebrew upgrades OpenBLAS
cc_import(
    name = "libopenblasp",
    shared_library = "libopenblasp-r0.3.29.dylib",
    system_provided = False,
)

cc_library(
    name = "openblas",
    deps = [":libopenblasp"],
)
""",
)
